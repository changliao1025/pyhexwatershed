<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="conversion_8cpp" kind="file">
    <compoundname>conversion.cpp</compoundname>
    <includes refid="conversion_8h" local="yes">conversion.h</includes>
    <incdepgraph>
      <node id="3">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>iterator</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="0">
        <label>/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp</label>
        <link refid="conversion.cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>global.h</label>
        <link refid="global_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="5">
        <label>sstream</label>
      </node>
      <node id="7">
        <label>algorithm</label>
      </node>
      <node id="1">
        <label>conversion.h</label>
        <link refid="conversion_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="conversion_8cpp_1a65cce034fae82d67d9522e6f746c40f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string convert_integer_to_string</definition>
        <argsstring>(int iNumber_in)</argsstring>
        <name>convert_integer_to_string</name>
        <param>
          <type>int</type>
          <declname>iNumber_in</declname>
        </param>
        <briefdescription>
<para>it is used to convert integer to string since c++ 11 doesn&apos;t support well </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iNumber_in</parametername>
</parameternamelist>
<parameterdescription>
<para>: the integer number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="30" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1ae13f57d141d8334d090798ed33d00522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string convert_integer_to_string</definition>
        <argsstring>(int iNumber_in, int iWidth_in)</argsstring>
        <name>convert_integer_to_string</name>
        <param>
          <type>int</type>
          <declname>iNumber_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iWidth_in</declname>
        </param>
        <briefdescription>
<para>convert an integer to a string with fixed length </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iNumber_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iWidth_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="46" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1aacd6e5edd4583687b33b7c9ee2cfdd4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string convert_double_to_string</definition>
        <argsstring>(double dNumber_in)</argsstring>
        <name>convert_double_to_string</name>
        <param>
          <type>double</type>
          <declname>dNumber_in</declname>
        </param>
        <briefdescription>
<para>convert a double data type to string </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dNumber_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="61" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="61" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1a1552732b1d832ee9bf213826b4ca82a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string convert_double_to_string</definition>
        <argsstring>(int iPrecision_in, int iWidth_in, double dNumber_in)</argsstring>
        <name>convert_double_to_string</name>
        <param>
          <type>int</type>
          <declname>iPrecision_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iWidth_in</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dNumber_in</declname>
        </param>
        <briefdescription>
<para>convert a double data type to a string with fixed length </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iPrecision_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iWidth_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dNumber_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="78" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="78" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1ae0c6de25ce33430db7eca24d47c14d7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double convert_from_kelvin_to_fahrenheit</definition>
        <argsstring>(double dTemperature_kelvin_in)</argsstring>
        <name>convert_from_kelvin_to_fahrenheit</name>
        <param>
          <type>double</type>
          <declname>dTemperature_kelvin_in</declname>
        </param>
        <briefdescription>
<para>convert temperature from kelvin to fahrenheit </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dTemperature_kelvin_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="95" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="95" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1ab64e4a2b158bec646e6cb56ee986cfd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double convert_from_fahrenheit_to_kelvin</definition>
        <argsstring>(double dTemperature_fahrenheit_in)</argsstring>
        <name>convert_from_fahrenheit_to_kelvin</name>
        <param>
          <type>double</type>
          <declname>dTemperature_fahrenheit_in</declname>
        </param>
        <briefdescription>
<para>convert temperature from fahrenheit to kelvin </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dTemperature_fahrenheit_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="107" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1abeb57d8be5d74102aae7b913043abc6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double convert_from_joule_per_meter_to_calorie_per_centimeter</definition>
        <argsstring>(double dJoule_per_meter_in)</argsstring>
        <name>convert_from_joule_per_meter_to_calorie_per_centimeter</name>
        <param>
          <type>double</type>
          <declname>dJoule_per_meter_in</declname>
        </param>
        <briefdescription>
<para>convert energy unit </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dJoule_per_meter_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="119" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1ac9f97daabb1f57e9576ef24272359896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double convert_from_calorie_per_centimeter_to_joule_per_meter</definition>
        <argsstring>(double dCalorie_per_centimeter_in)</argsstring>
        <name>convert_from_calorie_per_centimeter_to_joule_per_meter</name>
        <param>
          <type>double</type>
          <declname>dCalorie_per_centimeter_in</declname>
        </param>
        <briefdescription>
<para>conver energy units </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dCalorie_per_centimeter_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="131" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1adeed7bc32649b81704374203059bdafa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; split_string_by_space</definition>
        <argsstring>(std::string sString_in)</argsstring>
        <name>split_string_by_space</name>
        <param>
          <type>std::string</type>
          <declname>sString_in</declname>
        </param>
        <briefdescription>
<para>split a string using space </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sString_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="146" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="146" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1a52d0103daeb3246cb9e040574ffc2682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; split_string_by_delimiter</definition>
        <argsstring>(std::string sString_in, char cDelimiter)</argsstring>
        <name>split_string_by_delimiter</name>
        <param>
          <type>std::string</type>
          <declname>sString_in</declname>
        </param>
        <param>
          <type>char</type>
          <declname>cDelimiter</declname>
        </param>
        <briefdescription>
<para>split a string using user provide delimiter </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sString_in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cDelimiter</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::string&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="172" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="172" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1a2cef02c8b080eca9c3b431e6366e7005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ltrim</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>ltrim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="193" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1a86a7ab065991bbd3de9bb1dd9afcf961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rtrim</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>rtrim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="199" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="conversion_8cpp_1a1a32c4d3bd87256731e67936766c65ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string trim</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>trim</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" line="205" column="1" bodyfile="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp" bodystart="205" bodyend="208"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Conversion between data types. </para>    </briefdescription>
    <detaileddescription>
<para>HexWatershed, a hydrologic routing model based on the hexagon mesh framework. Copyright (C) &lt;2002&gt; &lt;Chang liao&gt;=&quot;&quot;&gt; Developer can be contacted by <ulink url="mailto:chang.liao@pnnl.gov">chang.liao@pnnl.gov</ulink> This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</para><para><simplesect kind="author"><para>Chang Liao (<ulink url="mailto:chang.liao@pnnl.gov">chang.liao@pnnl.gov</ulink>) </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>2019-06-11</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="19"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="conversion_8h" kindref="compound">conversion.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">std::string<sp/><ref refid="conversion_8cpp_1a65cce034fae82d67d9522e6f746c40f3" kindref="member">convert_integer_to_string</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iNumber_in)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str_out;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>iNumber_in;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>str_out<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_out;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">std::string<sp/><ref refid="conversion_8cpp_1a65cce034fae82d67d9522e6f746c40f3" kindref="member">convert_integer_to_string</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iNumber_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iWidth_in)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str_out;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>setw(iWidth_in)<sp/>&lt;&lt;<sp/>iNumber_in;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>str_out<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_out;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">std::string<sp/><ref refid="conversion_8cpp_1aacd6e5edd4583687b33b7c9ee2cfdd4e" kindref="member">convert_double_to_string</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dNumber_in)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str_out;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>dNumber_in;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>str_out<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_out;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">std::string<sp/><ref refid="conversion_8cpp_1aacd6e5edd4583687b33b7c9ee2cfdd4e" kindref="member">convert_double_to_string</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iPrecision_in,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iWidth_in,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dNumber_in)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str_out;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>std::setw(iWidth_in)<sp/>&lt;&lt;<sp/>std::setprecision(iPrecision_in)<sp/>&lt;&lt;<sp/>dNumber_in;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>str_out<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_out;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="conversion_8cpp_1ae0c6de25ce33430db7eca24d47c14d7b" kindref="member">convert_from_kelvin_to_fahrenheit</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dTemperature_kelvin_in)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dTemperature_celsius<sp/>=<sp/>dTemperature_kelvin_in<sp/>+<sp/><ref refid="global_8cpp_1aa15536031dff9817ed5a009ecd878681" kindref="member">kelvin_2_celsius</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dTemperature_fahrenheit_out<sp/>=<sp/>dTemperature_celsius<sp/>*<sp/>1.8<sp/>+<sp/>32.0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dTemperature_fahrenheit_out;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="conversion_8cpp_1ab64e4a2b158bec646e6cb56ee986cfd6" kindref="member">convert_from_fahrenheit_to_kelvin</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dTemperature_fahrenheit_in)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dTemperature_celsius<sp/>=<sp/>(dTemperature_fahrenheit_in<sp/>-<sp/>32.0)<sp/>/<sp/>1.8;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dTemperature_kelvin_out<sp/>=<sp/>dTemperature_celsius<sp/>-<sp/>273.15;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dTemperature_kelvin_out;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="conversion_8cpp_1abeb57d8be5d74102aae7b913043abc6b" kindref="member">convert_from_joule_per_meter_to_calorie_per_centimeter</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dJoule_per_meter_in)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCalorie_per_meter<sp/>=<sp/>dJoule_per_meter_in<sp/>*<sp/><ref refid="global_8cpp_1aae221d5ebaed70a9c1d7801130cbc3aa" kindref="member">joule_2_calorie</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCalorie_per_centimeter_out<sp/>=<sp/>dCalorie_per_meter<sp/>/<sp/>10000.0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dCalorie_per_centimeter_out;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="conversion_8cpp_1ac9f97daabb1f57e9576ef24272359896" kindref="member">convert_from_calorie_per_centimeter_to_joule_per_meter</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCalorie_per_centimeter_in)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCalorie_per_meter<sp/>=<sp/>dCalorie_per_centimeter_in<sp/>*<sp/>10000;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dJoule_per_meter_out<sp/>=<sp/>dCalorie_per_meter<sp/>*<sp/><ref refid="global_8cpp_1adbc4bf3ac66163e7c65c19d831575709" kindref="member">calorie_2_joule</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dJoule_per_meter_out;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="conversion_8cpp_1adeed7bc32649b81704374203059bdafa" kindref="member">split_string_by_space</ref>(std::string<sp/>sString_in)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>lLength<sp/>=<sp/>sString_in.length();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lLength<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>iss(sString_in);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istream_iterator&lt;std::string&gt;<sp/>iterator_begin(iss),<sp/>iterator_end;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vTokens_out(iterator_begin,<sp/>iterator_end);<sp/></highlight><highlight class="comment">//<sp/>done!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vTokens_out;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>nothing;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nothing;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="conversion_8cpp_1a52d0103daeb3246cb9e040574ffc2682" kindref="member">split_string_by_delimiter</ref>(std::string<sp/>sString_in,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cDelimiter)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>lLength<sp/>=<sp/>sString_in.length();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>vTokens_out;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lLength<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.str(sString_in);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>dummy;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(ss,<sp/>dummy,<sp/>cDelimiter))</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTokens_out.push_back(dummy);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vTokens_out;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">std::string<sp/><ref refid="conversion_8cpp_1a2cef02c8b080eca9c3b431e6366e7005" kindref="member">ltrim</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>s.find_first_not_of(<ref refid="conversion_8h_1aebab32df5b81a7363596ac2d2b0b557a" kindref="member">WHITESPACE</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(start<sp/>==<sp/>std::string::npos)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>s.substr(start);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">std::string<sp/><ref refid="conversion_8cpp_1a86a7ab065991bbd3de9bb1dd9afcf961" kindref="member">rtrim</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>s.find_last_not_of(<ref refid="conversion_8h_1aebab32df5b81a7363596ac2d2b0b557a" kindref="member">WHITESPACE</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(end<sp/>==<sp/>std::string::npos)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>s.substr(0,<sp/>end<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">std::string<sp/><ref refid="conversion_8cpp_1a1a32c4d3bd87256731e67936766c65ca" kindref="member">trim</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="conversion_8cpp_1a86a7ab065991bbd3de9bb1dd9afcf961" kindref="member">rtrim</ref>(<ref refid="conversion_8cpp_1a2cef02c8b080eca9c3b431e6366e7005" kindref="member">ltrim</ref>(s));</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/qfs/people/liao313/workspace/cplus/hexwatershed_pnnl/hexwatershed/src/conversion.cpp"/>
  </compounddef>
</doxygen>
